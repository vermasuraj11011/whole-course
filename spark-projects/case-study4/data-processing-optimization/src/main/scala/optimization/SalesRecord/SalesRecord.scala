// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package optimization.SalesRecord

@SerialVersionUID(0L)
final case class SalesRecord(
  store: _root_.scala.Predef.String = "",
  department: _root_.scala.Predef.String = "",
  date: _root_.scala.Predef.String = "",
  weeklySales: _root_.scala.Float = 0.0f,
  isHoliday: _root_.scala.Boolean = false,
  unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
) extends scalapb.GeneratedMessage
  with scalapb.lenses.Updatable[SalesRecord] {
  @transient
  private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
  private[this] def __computeSerializedSize(): _root_.scala.Int = {
    var __size = 0

    {
      val __value = store
      if (!__value.isEmpty) {
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      }
    };

    {
      val __value = department
      if (!__value.isEmpty) {
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      }
    };

    {
      val __value = date
      if (!__value.isEmpty) {
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      }
    };

    {
      val __value = weeklySales
      if (__value != 0.0f) {
        __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(4, __value)
      }
    };

    {
      val __value = isHoliday
      if (__value != false) {
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
      }
    };
    __size += unknownFields.serializedSize
    __size
  }
  override def serializedSize: _root_.scala.Int = {
    var __size = __serializedSizeMemoized
    if (__size == 0) {
      __size = __computeSerializedSize() + 1
      __serializedSizeMemoized = __size
    }
    __size - 1

  }
  def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
    {
      val __v = store
      if (!__v.isEmpty) {
        _output__.writeString(1, __v)
      }
    };
    {
      val __v = department
      if (!__v.isEmpty) {
        _output__.writeString(2, __v)
      }
    };
    {
      val __v = date
      if (!__v.isEmpty) {
        _output__.writeString(3, __v)
      }
    };
    {
      val __v = weeklySales
      if (__v != 0.0f) {
        _output__.writeFloat(4, __v)
      }
    };
    {
      val __v = isHoliday
      if (__v != false) {
        _output__.writeBool(5, __v)
      }
    };
    unknownFields.writeTo(_output__)
  }
  def withStore(__v: _root_.scala.Predef.String): SalesRecord      = copy(store = __v)
  def withDepartment(__v: _root_.scala.Predef.String): SalesRecord = copy(department = __v)
  def withDate(__v: _root_.scala.Predef.String): SalesRecord       = copy(date = __v)
  def withWeeklySales(__v: _root_.scala.Float): SalesRecord        = copy(weeklySales = __v)
  def withIsHoliday(__v: _root_.scala.Boolean): SalesRecord        = copy(isHoliday = __v)
  def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet)       = copy(unknownFields = __v)
  def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
  def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any =
    (__fieldNumber: @ _root_.scala.unchecked) match {
      case 1 =>
        val __t = store
        if (__t != "")
          __t
        else
          null
      case 2 =>
        val __t = department
        if (__t != "")
          __t
        else
          null
      case 3 =>
        val __t = date
        if (__t != "")
          __t
        else
          null
      case 4 =>
        val __t = weeklySales
        if (__t != 0.0f)
          __t
        else
          null
      case 5 =>
        val __t = isHoliday
        if (__t != false)
          __t
        else
          null
    }
  def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
    _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
    (__field.number: @ _root_.scala.unchecked) match {
      case 1 =>
        _root_.scalapb.descriptors.PString(store)
      case 2 =>
        _root_.scalapb.descriptors.PString(department)
      case 3 =>
        _root_.scalapb.descriptors.PString(date)
      case 4 =>
        _root_.scalapb.descriptors.PFloat(weeklySales)
      case 5 =>
        _root_.scalapb.descriptors.PBoolean(isHoliday)
    }
  }
  def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
  def companion: SalesRecord.type               = optimization.SalesRecord.SalesRecord
  // @@protoc_insertion_point(GeneratedMessage[optimization.proto.SalesRecord])
}

object SalesRecord extends scalapb.GeneratedMessageCompanion[SalesRecord] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[SalesRecord] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): SalesRecord = {
    var __store: _root_.scala.Predef.String                         = ""
    var __department: _root_.scala.Predef.String                    = ""
    var __date: _root_.scala.Predef.String                          = ""
    var __weeklySales: _root_.scala.Float                           = 0.0f
    var __isHoliday: _root_.scala.Boolean                           = false
    var `_unknownFields__` : _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__                                                     = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 =>
          _done__ = true
        case 10 =>
          __store = _input__.readStringRequireUtf8()
        case 18 =>
          __department = _input__.readStringRequireUtf8()
        case 26 =>
          __date = _input__.readStringRequireUtf8()
        case 37 =>
          __weeklySales = _input__.readFloat()
        case 40 =>
          __isHoliday = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    SalesRecord(
      store = __store,
      department = __department,
      date = __date,
      weeklySales = __weeklySales,
      isHoliday = __isHoliday,
      unknownFields =
        if (_unknownFields__ == null)
          _root_.scalapb.UnknownFieldSet.empty
        else
          _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[SalesRecord] =
    _root_
      .scalapb
      .descriptors
      .Reads {
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_
            .scala
            .Predef
            .require(
              __fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor),
              "FieldDescriptor does not match message type."
            )
          SalesRecord(
            store =
              __fieldsMap
                .get(scalaDescriptor.findFieldByNumber(1).get)
                .map(_.as[_root_.scala.Predef.String])
                .getOrElse(""),
            department =
              __fieldsMap
                .get(scalaDescriptor.findFieldByNumber(2).get)
                .map(_.as[_root_.scala.Predef.String])
                .getOrElse(""),
            date =
              __fieldsMap
                .get(scalaDescriptor.findFieldByNumber(3).get)
                .map(_.as[_root_.scala.Predef.String])
                .getOrElse(""),
            weeklySales =
              __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f),
            isHoliday =
              __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
          )
        case _ =>
          throw new RuntimeException("Expected PMessage")
      }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor =
    SalesRecordProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SalesRecordProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] =
    throw new MatchError(__number)
  lazy val nestedMessagesCompanions
    : Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] =
    throw new MatchError(__fieldNumber)
  lazy val defaultInstance = SalesRecord(store = "", department = "", date = "", weeklySales = 0.0f, isHoliday = false)
  implicit class SalesRecordLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, SalesRecord])
    extends _root_.scalapb.lenses.ObjectLens[UpperPB, SalesRecord](_l) {
    def store: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] =
      field(_.store)((c_, f_) => c_.copy(store = f_))
    def department: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] =
      field(_.department)((c_, f_) => c_.copy(department = f_))
    def date: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] =
      field(_.date)((c_, f_) => c_.copy(date = f_))
    def weeklySales: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] =
      field(_.weeklySales)((c_, f_) => c_.copy(weeklySales = f_))
    def isHoliday: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] =
      field(_.isHoliday)((c_, f_) => c_.copy(isHoliday = f_))
  }
  final val STORE_FIELD_NUMBER        = 1
  final val DEPARTMENT_FIELD_NUMBER   = 2
  final val DATE_FIELD_NUMBER         = 3
  final val WEEKLY_SALES_FIELD_NUMBER = 4
  final val IS_HOLIDAY_FIELD_NUMBER   = 5
  def of(
    store: _root_.scala.Predef.String,
    department: _root_.scala.Predef.String,
    date: _root_.scala.Predef.String,
    weeklySales: _root_.scala.Float,
    isHoliday: _root_.scala.Boolean
  ): SalesRecord = SalesRecord(store, department, date, weeklySales, isHoliday)
  // @@protoc_insertion_point(GeneratedMessageCompanion[optimization.proto.SalesRecord])
}
